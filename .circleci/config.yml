version: 2.1

### Context Setup
# AWS_ACCESS_KEY_ID
# AWS_SECRET_ACCESS_KEY
# AWS_ACCOUNT_ID
# AWS_REGION
# # Used for bitbucket repositories
# BITBUCKET_ACCESS_KEY
# BITBUCKET_ACCESS_SECRET
# # Used for github repositories
# GITHUB_ACCESS_KEY
# GITHUB_ACCESS_SECRET

### Prerequisite
# s3 bucket "${AWS_ACCOUNT_ID}-lambda-assets" has been created"

executors:
  terragrunt_executor:
    docker:
      - image: alpine/terragrunt:0.12.13
  gradle_executor:
    docker:
      - image: circleci/openjdk:8-jdk-stretch
  semver_executor:
    docker:
      - image: alpine/semver:5.5.0

jobs:
  build:
    executor: gradle_executor
    environment:
      # Configure the JVM and Gradle to avoid OOM errors
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
      LAMBDA_PATH: "lambda-s3"
    steps: # a collection of executable commands
      - checkout # check out source code to working directory
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
      - run: cat ${LAMBDA_PATH}/gradle/wrapper/gradle-wrapper.properties > gradle-wrapper.properties
      - restore_cache:
          key: v1-gradle-wrapper-{{ checksum "gradle-wrapper.properties" }}
      - run: cat ${LAMBDA_PATH}/build.gradle > build.gradle
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run:
          name: Run tests in parallel # See: https://circleci.com/docs/2.0/parallelism-faster-jobs/
          command: |
            pushd ${LAMBDA_PATH}
            # add unit test and integration test here
            gradle build
            ls -l build/libs
            ls -l build/distributions
      - save_cache:
          paths:
            - ~/.gradle/wrapper
          key: v1-gradle-wrapper-{{ checksum "gradle-wrapper.properties" }}
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - store_artifacts:
          path: lambda-s3/build/distributions
          when: always
      - persist_to_workspace:
          root: lambda-s3/build
          paths:
            - lib
            - distributions

  version_bitbucket:
    executor: semver_executor
    steps:
      - run: apk --update add git openssh coreutils jq curl
      - checkout
      - attach_workspace:
          at: lambda-s3/build
      - run:
          name: Create incremental version
          command: |
            set -ex
            # Run this job on master branch only
            BRANCH=$(git rev-parse --abbrev-ref HEAD)
            if [[ "$BRANCH" != "master" ]]; then
              echo 'Not tag on feature branches ${BRANCH}, Aborting script';
              exit 1;
            fi

            # Generate next incremental tag (Semantic Versioning)
            ssh-keyscan bitbucket.org >> /root/.ssh/known_hosts
            LATEST_TAG=$(git ls-remote --tags origin |awk -F \/ '{print $NF}'|grep ^1.0. |sort -Vr|head -1)
            echo ${LATEST_TAG}
            if [[ -z "${LATEST_TAG}" ]]
            then
                NEXT_TAG="1.0.0"
            else
                NEXT_TAG=$(semver -c -i patch ${LATEST_TAG})
            fi
            echo ${NEXT_TAG}

            find lambda-s3/build -ls

            # upload the zip file
            export ZIP_PATH="lambda-s3/build/distributions/"
            mv ${ZIP_PATH}/lambda-s3-1.0-SNAPSHOT.zip ${ZIP_PATH}/lambda-s3-${NEXT_TAG}.zip
            apk update
            apk add py-pip
            pip install awscli
            aws s3 cp ${ZIP_PATH}/lambda-s3-${NEXT_TAG}.zip s3://${AWS_ACCOUNT_ID}-lambda-assets/libs/lambda-s3-${NEXT_TAG}.zip

            # push the tag
            TOKEN=`curl -X POST -u "${BITBUCKET_ACCESS_KEY}:${BITBUCKET_ACCESS_SECRET}"       https://bitbucket.org/site/oauth2/access_token       -d grant_type=client_credentials | jq .access_token -r`
            echo ${TOKEN}

            echo "Change Remote Url"
            git remote set-url origin https://x-token-auth:${TOKEN}@bitbucket.org/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git
            echo "Set Bitbucket Username & Email"
            git config user.name "ci"
            git config user.email "ci"
            echo "Create & Push Bitbucket Tag"
            git tag ${NEXT_TAG}
            git push origin ${NEXT_TAG}

  version_github:
    executor: semver_executor
    steps:
      - add_ssh_keys:
          fingerprints:
            - "62:7e:cd:f4:77:37:a6:7e:f1:3b:62:43:e6:18:b2:21"
      - run: apk --update add git openssh coreutils jq curl
      - checkout
      - attach_workspace:
          at: lambda-s3/build
      - run:
          name: Create incremental version
          command: |
            set -ex
            # Run this job on master branch only
            BRANCH=$(git rev-parse --abbrev-ref HEAD)
            if [[ "$BRANCH" != "master" ]]; then
              echo 'Not tag on feature branches ${BRANCH}, Aborting script';
              exit 1;
            fi

            # Generate next incremental tag (Semantic Versioning)
            ssh-keyscan bitbucket.org >> /root/.ssh/known_hosts
            LATEST_TAG=$(git ls-remote --tags origin |awk -F \/ '{print $NF}'|sort -Vr|head -1)
            echo ${LATEST_TAG}
            if [[ -z "${LATEST_TAG}" ]]
            then
                NEXT_TAG="1.0.0"
            else
                NEXT_TAG=$(semver -c -i patch ${LATEST_TAG})
            fi
            echo ${NEXT_TAG}

            # upload the zip file
            export ZIP_PATH="lambda-s3/build/distributions/"
            mv ${ZIP_PATH}/lambda-s3-1.0-SNAPSHOT.zip ${ZIP_PATH}/lambda-s3-${NEXT_TAG}.zip
            apk update
            apk add py-pip
            pip install awscli
            aws s3 cp ${ZIP_PATH}/lambda-s3-${NEXT_TAG}.zip s3://${AWS_ACCOUNT_ID}-lambda-assets/libs/lambda-s3-${NEXT_TAG}.zip

            # push the tag
            echo "Set Bitbucket Username & Email"
            git config user.name "ci"
            git config user.email "ci"
            echo "Create & Push Bitbucket Tag"
            git tag ${NEXT_TAG}
            git push origin ${NEXT_TAG}

  terragrunt_plan:
    executor: terragrunt_executor
    parameters:
      environment:
        type: enum
        enum: ["test", "dev", "ops", "qa", "sit", "demo", "uat", "prod"]
    steps:
      - checkout
      - run:
          name: terragrunt dry-run
          environment:
            ENVIRONMENT: << parameters.environment >>
          command: |
            pushd terragrunt/${ENVIRONMENT}
            export TF_VAR_s3_key="libs/lambda-s3-${CIRCLE_TAG}.zip"
            export TF_VAR_environment="${ENVIRONMENT}"
            terragrunt validate-all
            terragrunt plan-all --terragrunt-non-interactive

  terragrunt_apply:
    executor: terragrunt_executor
    parameters:
      environment:
        type: enum
        enum: ["test", "dev", "ops", "qa", "sit", "demo", "uat", "prod"]
    steps:
      - checkout
      - run:
          name: terragrunt apply
          environment:
            ENVIRONMENT: << parameters.environment >>
          command: |
            pushd terragrunt/${ENVIRONMENT}
            export TF_VAR_s3_key="libs/lambda-s3-${CIRCLE_TAG}.zip"
            export TF_VAR_environment="${ENVIRONMENT}"
            terragrunt plan-all --terragrunt-non-interactive
            terragrunt apply-all --terragrunt-non-interactive -auto-approve

workflows:
  build-and-deploy:
    jobs:
      - build:
          name: build
          context: DevContext
      - version_github:
          name: version
          context: DevContext
          requires:
            - build
          filters:
            branches:
              only: master
      - terragrunt_plan:
          name: terragrunt_plan_dev
          environment: dev
          context: DevContext
          filters:
            tags:
              only: /1.0.*/
            branches:
              ignore: /.*/
      - approval:
          name: approval_dev
          type: approval
          requires:
            - terragrunt_plan_dev
          filters:
            tags:
              only: /1.0.*/
            branches:
              ignore: /.*/
      - terragrunt_apply:
          name: terragrunt_apply_dev
          environment: dev
          context: DevContext
          requires:
            - approval_dev
          filters:
            tags:
              only: /1.0.*/
            branches:
              ignore: /.*/
